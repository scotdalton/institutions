var search_data = {"index":{"searchIndex":["institutions","auth","core","institution","ipaddresses","merge","mvc","parents","services","util","deep_merge()","defaults()","filenames()","hash_keyize()","includes_ip?()","institutions()","institutions_with_ip()","ip_addresses=()","ip_addresses_add()","loadfiles()","loadpaths()","merge()","merge_parent()","merge_parents()","method_missing()","new()","reload()","respond_to_missing?()","to_hash()","valid_instance_variable?()","readme"],"longSearchIndex":["institutions","institutions::auth","institutions::core","institutions::institution","institutions::ipaddresses","institutions::merge","institutions::mvc","institutions::parents","institutions::services","institutions::util","institutions::merge#deep_merge()","institutions::defaults()","institutions::filenames()","institutions::util#hash_keyize()","institutions::ipaddresses#includes_ip?()","institutions::institutions()","institutions::institutions_with_ip()","institutions::ipaddresses#ip_addresses=()","institutions::ipaddresses#ip_addresses_add()","institutions::loadfiles()","institutions::loadpaths()","institutions::merge#merge()","institutions::parents#merge_parent()","institutions::merge_parents()","institutions::util#method_missing()","institutions::core::new()","institutions::reload()","institutions::util#respond_to_missing?()","institutions::util#to_hash()","institutions::util#valid_instance_variable?()",""],"info":[["Institutions","","Institutions.html","","<p>Order of paths, then order of files dictates overrides.\n"],["Institutions::Auth","","Institutions/Auth.html","",""],["Institutions::Core","","Institutions/Core.html","",""],["Institutions::Institution","","Institutions/Institution.html","","<p>institution.rb: Institution\n<p>Author &mdash; Scot Dalton\n\n<p>An Institution represents an administrative unit and its …\n"],["Institutions::IpAddresses","","Institutions/IpAddresses.html","",""],["Institutions::Merge","","Institutions/Merge.html","",""],["Institutions::Mvc","","Institutions/Mvc.html","",""],["Institutions::Parents","","Institutions/Parents.html","",""],["Institutions::Services","","Institutions/Services.html","",""],["Institutions::Util","","Institutions/Util.html","",""],["deep_merge","Institutions::Merge","Institutions/Merge.html#method-i-deep_merge","(arg1, arg2, key=nil)","<p>Recursively merges Hash (or any Object that can be converted to a Hash),\nArray and attributes that have …\n"],["defaults","Institutions","Institutions.html#method-c-defaults","()","<p>Returns an Array of Institutions\n"],["filenames","Institutions","Institutions.html#method-c-filenames","()",""],["hash_keyize","Institutions::Util","Institutions/Util.html#method-i-hash_keyize","(s)","<p>Convert s to a hash key\n"],["includes_ip?","Institutions::IpAddresses","Institutions/IpAddresses.html#method-i-includes_ip-3F","(candidate)","<p>Returns a <code>boolean</code> indicating whether the candidate IP  address\nis in the Institution’s IP range. Example: …\n"],["institutions","Institutions","Institutions.html#method-c-institutions","()","<p>Returns a Hash of Institution instances with the Institution#code as the\nHash key. Load file order can …\n"],["institutions_with_ip","Institutions","Institutions.html#method-c-institutions_with_ip","(ip)","<p>Returns an Array of Institutions that contain the given IP.\n"],["ip_addresses=","Institutions::IpAddresses","Institutions/IpAddresses.html#method-i-ip_addresses-3D","(args)",""],["ip_addresses_add","Institutions::IpAddresses","Institutions/IpAddresses.html#method-i-ip_addresses_add","(arg1, arg2)",""],["loadfiles","Institutions","Institutions.html#method-c-loadfiles","()","<p>Intended for internal use only.\n"],["loadpaths","Institutions","Institutions.html#method-c-loadpaths","()",""],["merge","Institutions::Merge","Institutions/Merge.html#method-i-merge","(arg={})","<p>Merges the given arguments into the Institution. Internally uses a\n“recursive merge” algorithm …\n"],["merge_parent","Institutions::Parents","Institutions/Parents.html#method-i-merge_parent","(parent={})","<p>Merges the given parent into the Institution. Assumes the parent has a\nto_hash method\n"],["merge_parents","Institutions","Institutions.html#method-c-merge_parents","()","<p>Handle inheritance for institutions\n"],["method_missing","Institutions::Util","Institutions/Util.html#method-i-method_missing","(method, *args, &block)","<p>Dynamically sets attr_readers for elements\n"],["new","Institutions::Core","Institutions/Core.html#method-c-new","(code, name, h={})","<p>Creates a new Institution object from the given code, name and hash.\n<p>The optional <code>hash</code>, if given, will …\n"],["reload","Institutions","Institutions.html#method-c-reload","()",""],["respond_to_missing?","Institutions::Util","Institutions/Util.html#method-i-respond_to_missing-3F","(method, include_private = false)","<p>Tells users that we respond to missing methods if they are instance\nvariables.\n"],["to_hash","Institutions::Util","Institutions/Util.html#method-i-to_hash","()","<p>Converts the Institution to a hash with keys representing each\nInstitutional attribute (as symbols) and …\n"],["valid_instance_variable?","Institutions::Util","Institutions/Util.html#method-i-valid_instance_variable-3F","(id)",""],["README","","README_rdoc.html","","<p>Institutions\n<p><img\nsrc=“https://secure.travis-ci.org/scotdalton/institutions.png?branch=master”\nalt=“Build …\n"]]}}